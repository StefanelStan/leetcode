package com.ss.leetcode.LC2024.december;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class MinimizeMalwareSpread {
    // https://leetcode.com/problems/minimize-malware-spread
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int minSpreadValue = Integer.MAX_VALUE, minIndex = Integer.MAX_VALUE;
        int currentSpread;
        List<Integer>[] neighbours = getNeighbours(graph);
        Queue<Integer> infectedNodes;
        for (int i = 0; i < initial.length; i++) {
            boolean[] isInfected = new boolean[graph.length];
            infectedNodes = new LinkedList<>();
            for (int j = 0; j < initial.length; j++) {
                if (i != j) {
                    isInfected[initial[j]] = true;
                    infectedNodes.add(initial[j]);
                }
            }
            currentSpread = (initial.length - 1) + infectNodes(neighbours, infectedNodes, isInfected);
            if (currentSpread < minSpreadValue) {
                minSpreadValue = currentSpread;
                minIndex = initial[i];
            } else if (currentSpread == minSpreadValue) {
                minIndex = Math.min(minIndex, initial[i]);
            }
        }
        return minIndex;
    }

    private int infectNodes(List<Integer>[] neighbours, Queue<Integer> infectedNodes, boolean[] isInfected) {
        int newInfections = 0;
        int infectedNode;
        while (!infectedNodes.isEmpty()) {
            infectedNode = infectedNodes.poll();
            if (neighbours[infectedNode] != null) {
                for (int nextNode : neighbours[infectedNode]) {
                    if (!isInfected[nextNode]) {
                        isInfected[nextNode] = true;
                        newInfections++;
                        infectedNodes.add(nextNode);
                    }
                }
            }
        }
        return newInfections;
    }

    private List<Integer>[] getNeighbours(int[][] graph) {
        List<Integer>[] neighbours = new List[graph.length];
        for (int i = 0; i < graph.length; i++) {
            for (int j = i; j < graph.length; j++) {
                if (graph[i][j] == 1) {
                    if (neighbours[i] == null) {
                        neighbours[i] = new ArrayList<>();
                    }
                    if (neighbours[j] == null) {
                        neighbours[j] = new ArrayList<>();
                    }
                    if (i != j) {
                        neighbours[i].add(j);
                        neighbours[j].add(i);
                    }
                }
            }
        }
        return neighbours;
    }
}
