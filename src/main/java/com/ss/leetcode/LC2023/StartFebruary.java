package com.ss.leetcode.LC2023;

import com.ss.leetcode.LC2023.february.CountDistinctNumbersOnBoard;
import com.ss.leetcode.LC2023.february.MaximizeWinFromTwoSegments;
import com.ss.leetcode.LC2023.february.MaximumNumberOfIntegersToChooseFromARangeI;
import com.ss.leetcode.LC2023.february.MinimumCommonValue;
import com.ss.leetcode.LC2023.february.NumberOfDaysBetweenTwoDates;
import com.ss.leetcode.LC2023.february.SeparateTheDigitsInAnArray;
import com.ss.leetcode.LC2023.february.TakeGiftsFromTheRichestPile;
import com.ss.leetcode.LC2023.february.TupleWithSameProduct;
import com.ss.leetcode.LC2023.february.UniqueLength3PalindromicSubsequences;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import org.apache.commons.io.FileUtils;

public class StartFebruary {
    public static void main(String[] args) {
        StartFebruary start = new StartFebruary();

//        start.numberOfDaysBetweenTwoDates();
//        start.uniqueLength3PalindromicSubsequences();
//        start.countDistinctNumbersOnBoard();
//        start.tupleWithSameProduct();
//        start.separateTheDigitsInAnArray();
//        start.maximumNumberOfIntegersToChooseFromARangeI();
//        start.maximizeWinFromTwoSegments();
//        start.minimumCommonValue();
        start.takeGiftsFromTheRichestPile();
    }

    public void numberOfDaysBetweenTwoDates() {
        NumberOfDaysBetweenTwoDates nodbtd = new NumberOfDaysBetweenTwoDates();

        System.out.println("1 == " + nodbtd.daysBetweenDates("2019-06-29", "2019-06-30"));
        System.out.println("15 == " + nodbtd.daysBetweenDates("2020-01-15", "2019-12-31"));
        System.out.println("5 == " + nodbtd.daysBetweenDates("2004-02-25", "2004-03-01"));
        System.out.println("35068 == " + nodbtd.daysBetweenDates("2004-02-25", "2100-03-01"));
    }

    public void uniqueLength3PalindromicSubsequences() {
        UniqueLength3PalindromicSubsequences ul3ps = new UniqueLength3PalindromicSubsequences();

        System.out.println("3 == " + ul3ps.countPalindromicSubsequence("aabca"));
        System.out.println("0 == " + ul3ps.countPalindromicSubsequence("adc"));
        System.out.println("4 == " + ul3ps.countPalindromicSubsequence("bbcbaba"));
    }

    public void countDistinctNumbersOnBoard() {
        CountDistinctNumbersOnBoard cdnob = new CountDistinctNumbersOnBoard();

        System.out.println("4 == " + cdnob.distinctIntegers(5));
        System.out.println("2 == " + cdnob.distinctIntegers(3));
    }

    public void tupleWithSameProduct() {
        TupleWithSameProduct twsp = new TupleWithSameProduct();

        System.out.println("8 == " + twsp.tupleSameProduct(new int[]{2,3,4,6}));
        System.out.println("16 == " + twsp.tupleSameProduct(new int[]{1,2,4,5,10}));
        System.out.println("536 == " + twsp.tupleSameProduct(new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}));
        System.out.println("0 == " + twsp.tupleSameProduct(new int[]{1,2,3,4}));
        System.out.println("40 == " + twsp.tupleSameProduct(new int[]{2,12,1,24,4,6}));
    }

    public void separateTheDigitsInAnArray() {
        SeparateTheDigitsInAnArray stdiaa = new SeparateTheDigitsInAnArray();

        System.out.println("[1,3,2,5,8,3,7,7] == " + Arrays.toString(stdiaa.separateDigits(new int[]{13,25,83,77})));
        System.out.println("[7,1,3,9] == " + Arrays.toString(stdiaa.separateDigits(new int[]{7,1,3,9})));
    }

    public void maximumNumberOfIntegersToChooseFromARangeI() {
        MaximumNumberOfIntegersToChooseFromARangeI mnoitcfari = new MaximumNumberOfIntegersToChooseFromARangeI();

        System.out.println("2 == " + mnoitcfari.maxCount(new int[]{1,6,5}, 5, 6));
        System.out.println("0 == " + mnoitcfari.maxCount(new int[]{1,2,3,4,5,6,7}, 8, 1));
    }

    public void maximizeWinFromTwoSegments() {
        MaximizeWinFromTwoSegments mwfts = new MaximizeWinFromTwoSegments();

        System.out.println("7 == " + mwfts.maximizeWin(new int[]{1,1,2,2,3,3,5}, 2));
        System.out.println("2 == " + mwfts.maximizeWin(new int[]{1,2,3,4}, 0));
        System.out.println("11 == " + mwfts.maximizeWin(new int[]{4,4,4,4,4,4,4,4,4,4,4}, 5));
        System.out.println("159 == " + mwfts.maximizeWin(new int[]{2616,2618,2620,2621,2626,2635,2657,2662,2662,2669,2671,2693,2702,2713,2714,2718,2730,2731,2750,2756,2772,2773,2775,2785,2795,2805,2811,2813,2816,2823,2824,2824,2826,2830,2833,2857,2885,2898,2910,2919,2928,2941,2942,2944,2965,2967,2970,2973,2974,2975,2977,3002,3007,3012,3042,3049,3078,3084,3089,3090,3094,3097,3114,3124,3125,3125,3144,3147,3148,3174,3197,3255,3262,3288,3291,3316,3320,3322,3331,3342,3378,3412,3412,3416,3420,3427,3428,3446,3452,3472,3479,3483,3488,3500,3516,3522,3531,3532,3540,3540,3544,3557,3570,3580,3592,3597,3597,3601,3615,3631,3640,3645,3673,3677,3681,3683,3685,3718,3738,3746,3758,3769,3797,3802,3815,3832,3839,3851,3864,3888,3889,3901,3902,3910,3913,3933,3940,3961,3974,3988,4003,4013,4019,4023,4026,4047,4060,4065,4072,4073,4082,4084,4109,4132,4139,4143,4145,4146,4155}, 6641));
        System.out.println("1016 == " + mwfts.maximizeWin(new int[]{195776732,195922618,195928203,195959923,195969334,196246947,196250093,196252185,196350370,196365852,196502855,196575833,196596685,196714908,196864901,196921975,197135903,197378762,197560513,197698554,197719200,197866137,197922225,198112762,198121355,198149100,198404646,198496182,198595298,198761021,199265596,199344018,199390108,199437988,199519929,199828524,199844698,199907564,200154442,200171131,200192131,200247187,200276842,200295928,200368614,200446601,200457233,200529757,200552415,200647932,200773505,201386627,201407957,201412373,201741123,201799061,202017546,202058677,202098629,202198431,202236657,202272412,202388861,202468532,202563518,202664790,202680665,202749873,202890101,203212871,203658274,203662984,203697064,203877675,203977846,204056339,204374771,204640401,204729707,204830279,205012288,205036666,205058294,205073485,205102749,205117951,205129891,205200104,205539485,205549768,205594083,205627185,205657235,205714265,206048748,206050419,206060471,206174739,206219879,206231995,206246689,206248933,206695069,206904035,206908935,206931697,206971304,207269227,207303289,207573013,207577591,207746791,207863718,207917907,207929606,208082772,208172101,208188257,208190865,208207729,208224171,208374074,208616161,208786942,208944757,208955432,209181404,209485736,209493277,209624173,209775211,209927847,210069175,210395641,210422697,210653857,210725824,210791434,210909753,211040892,211204548,211366652,211443964,211474952,211585042,211710842,211720286,211725265,211828566,212008610,212394159,212557359,212821299,213225057,213413519,213627769,213731094,213734956,213825550,213828899,213833184,213868785,213890206,213982087,214170058,214382181,214389660,214401215,214429197,214445331,214469224,214528469,214569117,214674408,214722471,214774722,214883533,214925591,214955776,215184261,215427382,215568399,215582464,215643451,215675105,215707959,215950851,216035470,216048255,216092755,216137764,216358950,216378453,216393958,216566693,216568814,216716673,216731409,217234763,217610047,217664712,217705087,217716813,217781918,218016960,218046822,218320514,218357104,218372179,218419327,218444265,218676022,218812617,218902492,218981249,219053481,219181089,219348244,219402835,219422832,219596409,219833137,219883965,219938778,219964945,220049089,220269336,220272145,220365756,220428951,220653472,220719372,220743486,220752520,220842298,220930716,220958298,221061522,221169579,221454649,221504059,221681161,221901318,222000317,222129546,222389011,222408669,222479293,222511244,222544889,222554800,222909333,223018069,223134143,223277834,223433158,223788257,223907768,223960270,224220216,224228739,224498480,224859493,224890494,224900048,224910368,224992275,225103301,225169471,225254798,225295892,225443757,225731366,225822122,225847310,225905468,226207960,226369400,226490270,226501664,226581854,226631682,226674975,226873202,227027561,227104442,227125509,227186516,227364999,227994035,228088406,228153506,228177546,228426680,228484881,228636907,228674246,228744344,228853449,228887010,228955468,229035552,229097381,229150424,229401502,229422283,229471013,229529284,229551356,229554955,229630032,229762797,229811262,230163713,230189987,230253515,230373038,230479240,230579309,230625841,230703409,230706875,230816596,230859138,230886665,230985905,231113051,231355622,231614035,231622123,231705644,231782555,231880601,231951331,232081906,232104392,232114158,232156081,232253830,232285458,232315742,232333121,232397749,232399498,232460010,232472092,232598043,232661049,232799345,232848195,232864727,233047791,233094186,233246787,233938760,233983004,233990755,234109088,234362385,234365394,234387952,234440079,234506191,234522852,234557718,234807139,234979907,235031184,235164313,235368801,235462258,235464125,235719906,235764851,235791698,235895478,235977951,236053849,236126204,236215343,236290299,236359008,236369577,236392409,236478029,236483200,236687832,236757255,236995982,237474516,237490445,237513964,237656408,237683282,237742670,237966476,237987410,238027394,238192596,238255700,238273977,238802571,239023529,239074926,239092573,239404448,239405906,239417203,239426349,239662258,239972922,239987584,240104170,240221608,240239709,240256041,240559430,240559656,240722882,240799894,240849834,240928507,240978736,241036759,241344320,241387580,241978370,241996465,242054005,242162707,242238438,242250031,242346473,242466326,242488758,242498859,242637418,242706638,242919248,242922911,243001399,243068023,243215687,243330255,243364317,243461940,243557453,243616301,243831797,243863015,244842670,244893067,245035402,245091984,245316326,245488764,245549623,245586080,245652677,245902037,246030704,246158472,246185155,246204200,246215270,246284715,246340901,246557451,246608463,246637628,246638655,246690166,246773956,246900053,246974899,247049464,247179728,247285341,247474833,247501875,247556855,247599007,247613019,247746836,248135966,248368888,248441309,248548622,248584875,248766603,248766953,248803858,248819732,248869590,249049256,249146352,249192889,249215330,249234327,249234966,249247208,249252329,249473772,249566350,249758385,249847059,249847397,249847575,249923777,249931748,249938107,249957026,250023970,250150111,250154923,250221467,250304693,250378974,250385445,250447186,250524895,250584004,250669906,250772750,251005784,251289240,251304436,251310138,251392663,251527160,251946654,252070723,252357392,252624298,252658281,252864702,252890004,252893645,253229060,253539965,253850244,253901021,254040215,254555347,254608563,254674820,254687397,254773549,254798945,254923095,254970747,254989565,255046396,255084054,255091137,255171298,255438564,255511594,255517886,255696544,255980468,256196502,256272817,256376936,256460611,256534185,256552818,256556643,256651620,256701891,256781000,256783138,256803489,256821841,256861320,256896987,256897831,256928700,256973085,257016772,257067496,257093107,257307937,257395939,257617932,257715801,257718370,257742575,257767039,257873215,257892769,257946085,258108690,258168857,258735325,258765634,259182665,259189743,259196663,259406651,259415466,259588706,259611265,259680956,259910661,259930831,260039114,260330797,260798393,260856310,260863764,260866366,260910592,260996454,261127693,261176885,261257904,261350262,261601789,261706072,261716079,261739169,262213126,262305139,262321801,262423122,262553260,262601122,262690775,262740116,262759290,262779206,262822242,263072865,263133316,263508398,263557623,263612064,263644240,263692131,263752111,263814260,263945060,264038771,264156823,264247996,264389374,264406828,264430026,264454167,264580116,264679278,264772628,264804002,265035855,265188698,265291831,265439049,265555518,265832828,265927827,266059980,266165148,266215178,266493743,266608148,266685382,266822070,266832159,267247294,267325090,267793710,267822779,267839093,267869628,267924346,267928008,268011345,268058299,268320957,268329649,268563628,268669560,268674237,268814057,268850592,268853336,269084985,269275126,269386619,269488301,269563866,269582473,269680837,269732836,269834939,270164919,270249429,270301372,270321341,270338622,270482203,270506395,270567122,270778151,271042230,271161306,271264933,271293830,271359504,271418899,271685751,271690390,271812448,271826467,271875003,271929847,272023793,272149652,272189275,272213867,272308655,272318794,272548812,272676786,272704800,272763044,272801714,272851262,272892090,272946554,272978795,273074045,273207429,273283974,273462153,273484288,273623546,273687620,273839014,273843582,273876445,274002406,274096373,274213608,274470272,274500996,274524328,274530779,274640998,274897456,275018246,275109967,275236938,275347790,275557040,275561454,275805198,275881339,275922843,276042692,276138298,276144885,276330275,276411530,276549133,276573093,276580309,276757717,276773800,276986869,277011752,277263734,277276312,277725470,277742406,278199027,278212069,278262902,278414837,278697526,278737180,278762751,279429502,279581165,279594341,279626303,279702377,279711221,279718855,279741004,279861060,279905831,279926295,280008786,280019232,280296366,280314115,280702051,280754137,280820580,280853809,280974399,281074500,281118757,281133278,281313122,281426876,281681548,281712455,281989666,282377947,282409977,282842593,283057472,283225696,283326850,283411975,283427056,283444523,283506546,283579011,283780528,283866213,283905291,283984828,284005739,284201502,284267081,284624404,284732203,284831679,284924793,284992089,285070305,285089192,285304184,285310173,285542247,285559087,285578167,285604752,285613010,285651199,285771527,285787999,285849714,285970552,286439329,286457777,287061001,287063758,287163309,287376615,287760928,287846184,287869372,288067085,288072416,288136454,288177611,288226606,288546873,288587394,288640690,288844125,288958236,289018016,289098993,289101780,289302901,289456525,289473430,289593620,289612619,289977441,290014084,290130048,290142411,290238774,290275015,290313244,290471985,290574915,290653994,290655170,290676130,290767418,290804824,290827586,290886614,290937312,291054008,291070673,291295041,291463269,291536404,291544047,291620763,291725859,291751919,291774895,291878152,291955357,292225170,292244254,292267578,292342143,292376653,292410407,292514192,292558706,292777839,292870107,292967180,293061771,293064391,293080797,293311124,293350075,293366046,293434089,293643462,293704314,293898940,293940654,294342614,294366036,294669234,294671186,294790448,295078209,295086513,295096895,295244969,295245831,295324232,295327652,295487847,295490645,295890354,296038870,296060049,296289320,296485868,296486166,296561505,296580325,296689098,296726149,296787799,296842055,296908445,296948093,297018151,297090651,297255004,297277374,297390959,297435091,297539958,297789688,297948401,298024672,298161243,298386566,298409653,298588323,298604335,298666240,298705305,298876161,298912943,298976242,299162528,299257594,299285111,299312837,299313457,299322996,299342859,299406953,299533534,299717111,299765797,299798168,299819446,299877939,299959594,300021303,300081740,300151209,300223595,300471878,300561012,300596719,300901201,301331163,301473362,301496785,301741220,301746700,301826860,301859313,301971260,302050630,302161458,302330216,302366523,302533712,302592026,302651737,302791899,302801392,302815548,302838913}, 63181031));


        int[] arr = {1,3,5,7,9,11,13,15,17,19};

        System.out.println(Arrays.binarySearch(arr, -5));
        System.out.println(Arrays.binarySearch(arr, 1));
        System.out.println(Arrays.binarySearch(arr, 2));
        System.out.println(Arrays.binarySearch(arr, 0));
        System.out.println(Arrays.binarySearch(arr, 10));
        System.out.println(Arrays.binarySearch(arr, 18));
        System.out.println(Arrays.binarySearch(arr, 20));

    }

    public void minimumCommonValue() {
        MinimumCommonValue mcv = new MinimumCommonValue();

        System.out.println("2 == " + mcv.getCommon(new int[]{1,2,3}, new int[]{2,4}));
        System.out.println("2 == " + mcv.getCommon(new int[]{1,2,3,6}, new int[]{2,3,4,5}));
        System.out.println("-1 == " + mcv.getCommon(new int[]{1}, new int[]{2}));
        System.out.println("2 == " + mcv.getCommon(new int[]{1,2}, new int[]{2,3}));
        System.out.println("3 == " + mcv.getCommon(new int[]{3}, new int[]{2,3}));
    }

    public void takeGiftsFromTheRichestPile() {
        TakeGiftsFromTheRichestPile tgftrp = new TakeGiftsFromTheRichestPile();

        System.out.println("29 == " + tgftrp.pickGifts(new int[]{25,64,9,4,100}, 4));
        System.out.println("4 == " + tgftrp.pickGifts(new int[]{1,1,1,1}, 4));
    }
}
